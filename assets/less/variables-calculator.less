//
// Color Variable Calculations
// --------------------------------------------------


// Theme Variables
// --------------------------------------------------
@themePrimaryColor:            @blue; 
@themeSpinColor:            spin(@themePrimaryColor, 90%);


@testColor:                 rgba(86,181,197,.91);

// Extract color information
@hue:                      hue(@testColor);        // returns the `hue` channel of @color
@saturation:               saturation(@testColor); // returns the `saturation` channel of @color
@lightness:                lightness(@testColor);  // returns the 'lightness' channel of @color
@alpha:                    alpha(@testColor);      // returns the 'alpha' channel of @color

// inputs
.themecolor {
  hue: @hue;
  saturation: @saturation;
  lightness: @lightness;
  alpha: @alpha;
}
// outputs
.themecolor {
  hue: 189;
  saturation: 96%;
  lightness: 44%;
}


// Color Functions
// -------------------------

lighten(@color, 10%);     // return a color which is 10% *lighter* than @color
darken(@color, 10%);      // return a color which is 10% *darker* than @color

saturate(@color, 10%);    // return a color 10% *more* saturated than @color
desaturate(@color, 10%);  // return a color 10% *less* saturated than @color

fadein(@color, 10%);      // return a color 10% *less* transparent than @color
fadeout(@color, 10%);     // return a color 10% *more* transparent than @color
fade(@color, 50%);        // return @color with 50% transparency

spin(@color, 10);         // return a color with a 10 degree larger in hue than @color
spin(@color, -10);        // return a color with a 10 degree smaller hue than @color

mix(@color1, @color2);    // return a mix of @color1 and @color2
contrast(@color1, @darkcolor, @lightcolor); // return @darkcolor if @color1 is >50% luma (i.e. is a light color), otherwise return @lightcolor


// HSLA Functions
// --------------------------------------
// You can also extract color information
hue(@color);        // returns the `hue` channel of @color
saturation(@color); // returns the `saturation` channel of @color
lightness(@color);  // returns the 'lightness' channel of @color
red(@color);        // returns the 'red' channel of @color
green(@color);      // returns the 'green' channel of @color
blue(@color);       // returns the 'blue' channel of @color
alpha(@color);      // returns the 'alpha' channel of @color
luma(@color);       // returns the 'luma' value (perceptual brightness) of @color

// This is useful if you want to create a new color based on another color’s channel, for example:
@newHue: hsl(hue(@old), 45%, 90%);  // @new will have @old’s hue, and its own saturation and lightness.






// How saturated is the base color?
@saturationLevel:                 1; // 1 - 10


// How light is the base color?
@lightnessLevel:                  1; // 1 - 10



















// Base Calculation
// --------------------------------------------------
@calculatorBase:            0;


// Starting Color
// -------------------------

@pinkShade                  10%; // spins 10%
@redShade:                  10%; // spins 10%
@redOrangeShade:            10%; // spins 10%
@orangeShade:               10%; // spins 10%
@orangeYellowShade:         10%; // spins 10%
@yellowShade:               10%; // spins 10%
@greenShade:                10%; // spins 10%
@greenBlueShade:            10%; // spins 10%
@blueShade:                 10%; // spins 10%
@indigoShade:               10%; // spins 10%
@purpleShade:               10%; // spins 10%
@violetShade:               10%; // spins 10%


// Starting Darkness
// -------------------------

@blackLevel             10%; // spins 10%
@grayDarkerLevel:       #222;
@grayDarkLevel:         #333;
@grayLevel:             #555;
@grayLightLevel:        #aaa;
@grayLighterLevel:      #eee;
@whiteLevel:            #fff;




// Saturation
// --------------------------------------------------

// Very Saturated
.mixinSaturation (@themeSaturation) when (saturation(@themeSaturation) >= 30%) {
  background-color: black; 
}
// Saturated
.mixinSaturation (@themeSaturation) when (saturation(@themeSaturation) >= 70%) {
  background-color: blue; 
}
// Unsaturated
.mixinSaturation (@themeSaturation) when (saturation(@themeSaturation) < 69%) { 
  background-color: white; 
}
// Saturation Mixin
.mixinSaturation (@themeSaturation) {
  color: @themeSaturation; 
}

// Saturation Text
.class1 {
  .mixinSaturation(#00D7FF) 
}
.class2 {
  .mixinSaturation(#56B5C5) 
}
.class3 {
  .mixinSaturation(#86C0CA) 
}



// Lightness and Darkness
// --------------------------------------------------

// Dark Background
.mixinColor (@themeColor) when (lightness(@themeColor) >= 50%) {
  background-color: black; 
}
// Light Background
.mixinColor (@themeColor) when (lightness(@themeColor) < 50%) { 
  background-color: white; 
}
// Declare Mixin
.mixinColor (@themeColor) {
  color: @themeColor; 
}

// Use Mixin
.class4 {
  .mixinColor(#ddd) 
}
.class5 {
  .mixinColor(#555) 
}


// Translate Guards
.translate(@axis,@distance) when (@axis = 'x') {
    //styles
}

.translate(@axis,@distance) when (@axis = 'y') {
    //styles
}


.translate(@axis,@distance) when (@axis = 'z') {
    //styles
}



.translate (@x: 0, @y: 0) when not (@x = 'x') and not (@x = 'y') and not (@x = 'z') {
    // styles
}

.translate (@axis, @x: 0) when (@axis = x) {
    // styles
}

.translate (@axis, @x: 0) when (@axis = y) {
    // styles
}

.translate (@axis, @x: 0) when (@axis = z) {
    // styles
}


// Global values
// --------------------------------------------------

// Math functions

// LESS provides a couple of handy math functions you can use on number values:

round(1.67); // returns `2`
ceil(2.4);   // returns `3`
floor(2.6);  // returns `2`





